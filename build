#!/usr/bin/env python3
import os
import argparse
import json
import sys
from typing import Dict, List

# read algorithms list
algorithms: Dict[int, List[str]] = json.loads(open('./algorithms.json').read())
for alg in algorithms["_73"]:
    algorithms[alg] = '73'
for alg in algorithms["_84"]:
    algorithms[alg] = '84'
algorithms['_all'] = algorithms['_73']+algorithms['_84']


parser = argparse.ArgumentParser(description='Gradle build script wrapper')

parser.add_argument(
    'alg', choices=algorithms["_all"], metavar="<Algorithm>",
    help=f"Availiable choices: {', '.join(algorithms['_all'])}")
parser.add_argument("-chk", metavar="CHK",
                    help="size of CHK-by-n parity-check matrix", default=3)

parser.add_argument("-r", "--run", action="store_true",
                    help="run elabroated testbench")
parser.add_argument("--top", default="decoder_tb",
                    help="specifiy top-level to elaborate")
parser.add_argument("-w", "--wave", action="store_true",
                    help="show waveform use gtkwave")
parser.add_argument("-c", "--clean", action="store_true",
                    help="clean before build")
parser.add_argument("-d", "--dry-run", action="store_true",
                    help="only print the command to run")
parser.add_argument("-f", "--force", action="store_true",
                    help="force ignore build cache")
parser.add_argument('-v', '--verbose', action='count',
                    default=0, help="verbose output")
# parser.add_argument('pass_to_gradle', nargs=argparse.REMAINDER)

if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)
args, unusedArgs = parser.parse_known_args()
if '--' in unusedArgs:
    unusedArgs.remove('--')


pArg = {
    "vhdlGen_size": algorithms[args.alg],
    "vhdlGen_chkBits": args.chk,
    "ghdl_topLevel": args.top,
    'modify_replace': args.alg.upper()
}
pArg_list = [
    f'-P{name}={pArg[name]}' for name in dict.keys(pArg)]


task = 'elaborate'
if args.run:
    task = 'run'
if args.wave:
    task = 'wave'

task = [task]
if args.clean:
    task.insert(0, "clean")

extArg_list = unusedArgs
if args.force:
    extArg_list.append('--rerun-tasks')

if args.verbose > 2:
    print(f"pArg: {pArg_list}")
    print(f"task: {task}")
    print(f"extArgs: {extArg_list}")


cmd_list = ["./gradlew"] + task + pArg_list + extArg_list
cmd_str = ' '.join(cmd_list)
if args.dry_run or args.verbose > 0:
    print("\n\t"+cmd_str+"\n")

if not args.dry_run:
    os.system(cmd_str)
else:
    print("Dry-run, skip command executing.")
