/* groovylint-disable BuilderMethodWithSideEffects, DuplicateStringLiteral, FactoryMethodName, LineLength, UnusedMethodParameter, VariableTypeRequired */
plugins {
    id 'com.github.node-gradle.node' version '3.4.0'
}

class CustomEventLogger extends BuildAdapter implements TaskExecutionListener {

    void beforeExecute(Task task) {
        super()
    }
    void afterExecute(Task task, TaskState state) {
        super()
    }
    void buildFinished(BuildResult result) {
        if (result.failure != null) {
            println '\033[31;1mBUILD FAILED\033[0m'
        } else {
            println '\033[32;1mBUILD SUCCESS\033[0m'
        }
    }

}
gradle.useLogger(new CustomEventLogger())

buildDir = 'build'
def ghdl = [
        exec: 'ghdl',
        workDir: buildDir,
        args: ['--std=08', '-fcolor-diagnostics'],
        topLevel: 'decoder_tb'
]

task compileScripts(type: YarnTask) {
    group 'build:pre'
    description 'Use tsc to compile helper scripts'
    dependsOn yarn

    inputs.dir 'scripts'
    outputs.dir "${buildDir}/dist"

    args = ['compileScripts']
}

task vhdlGen(type:NodeTask) {
    group 'build:pre'
    description 'Generate pre-defined vhdl'
    dependsOn compileScripts

    inputs.files files("${buildDir}/dist", 'scripts/*.m')
    outputs.dir 'vhdl/gen'

    script = file("$buildDir/dist/generator.js")
    finalizedBy {
        copy2q2prj
    }
}

task hierarchy(type: NodeTask) {
    group 'build:pre'
    description 'Generate vhdl hierarchy for ghdl analyze'
    dependsOn vhdlGen

    inputs.files fileTree('vhdl')
    String out = "${buildDir}/.list"
    outputs.file out

    script = file("${buildDir}/dist/hierarchy.js")
    ext.list = {
        return file(out).text.split(' ')
    }
}

task analyze {
    group 'build:ghdl'
    description 'Run ghdl analyze'
    dependsOn hierarchy

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-a', ghdl.args, hierarchy.list()].flatten()
        }
    }
}

task elaborate {
    group 'build:ghdl'
    description 'Elaborate design'
    dependsOn analyze

    inputs.files files('vhdl', "${buildDir}/.list")
    outputs.dir buildDir

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-e', ghdl.args, ghdl.topLevel].flatten()
        }
    }
}

task run {
    group 'build:ghdl'
    description 'Run top-level design'
    dependsOn elaborate

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-r', ghdl.args, ghdl.topLevel, '--wave=wave.ghw', '--stop-time=10ns'].flatten()
        }
    }
}

task waveform {
    group 'build:ghdl'
    description 'Open waveform in GTKWave'
    dependsOn run

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine 'gtkwave', '-f', 'wave.ghw'
        }
    }
}

task clean {
    group 'build'
    description 'Cleanup workspace'

    doLast {
        delete "$buildDir"
    }
}

task build {
    group 'build'
    dependsOn elaborate
}

delete fileTree('.') {
    include 'hs_err_*.log'
}

task copy2q2prj {
    description 'copy sources to quartus project dir'
    inputs.dir 'vhdl'
    outputs.dir 'q2prj'

    doLast {
        copy {
            from fileTree('vhdl') {
                include '**/*.vhdl'
            }.files
            into 'q2prj'
        }
    }
}

task elaborateTest {
    def fList = fileTree('./vhdl/test/testbenchs') {
        include '*.vhdl'
         }.collect {
            f -> f.name - ~/\.\w+$/
    }
    println fList
}
