/* groovylint-disable BuilderMethodWithSideEffects, DuplicateStringLiteral, FactoryMethodName, LineLength, UnusedMethodParameter, VariableTypeRequired */
plugins {
    id 'com.github.node-gradle.node' version '3.5.1'
    id 'net.rdrei.android.buildtimetracker' version '0.11.0'
}
buildtimetracker {
    reporters {
        summary {
            ordered false
            threshold 100
            barstyle 'unicode'
        }
    }
}
import groovy.json.JsonSlurper

def getNodeByName(String jsonString, String nodeName,String defaultVal) {
    def root = new JsonSlurper().parseText(jsonString)
    def node = root[nodeName]
    if (node == null) {
        println("**${nodeName} not found in JSON, using default value")
        return defaultVal
    }
    return node
}

String props(String name, String defaultVal) {
    return project.findProperty(name) ?: defaultVal
}

def dir = [
        src    : 'vhdl',
        out    : 'out',
        gen    : 'vhdl/generated',
        scripts: 'scripts'
]
def ghdl = [
        exec    : 'ghdl',
        workDir : "${dir.out}",
        args    : ['--std=08', '-fcolor-diagnostics'],
        topLevel: props('ghdl_topLevel', 'decoder_tb')
]

task compileScripts(type: Exec) {
    group 'build:pre'
    description 'Use tsc to compile helper scripts'
    dependsOn yarn

    inputs.dir fileTree(dir:'scripts', include: '**.ts')
    outputs.dir "${dir.out}/dist"

    commandLine 'yarn', 'tsc', '--outDir', "${dir.out}/dist"
}

task vhdlGen(type: Exec) {
    workingDir 'scripts'
    String size = '73'
    String chkBits = '3'
    if (project.hasProperty('vhdlGen_size')) {
        size = vhdlGen_size
    }
    if (project.hasProperty('vhdlGen_chkBits')) {
        chkBits = vhdlGen_chkBits
    }
    commandLine 'python', 'generator.py', size, chkBits, file(dir.gen).absolutePath

    inputs.dir 'scripts'
    outputs.dir dir.gen
}

task hierarchy(type: NodeTask) {
    group 'build:pre'
    description 'Generate vhdl hierarchy for ghdl analyze'
    dependsOn vhdlGen
    dependsOn compileScripts

    outputs.cacheIf { true }
    inputs.files fileTree('vhdl')

    String outFile = "${dir.out}/hierarchy.list"
    outputs.file "${dir.out}/modify.vhdl"
    outputs.file outFile

    script = file("${dir.out}/dist/hierarchy.js")
    args = [ghdl.topLevel]
    def output = new ByteArrayOutputStream()
    def output2 = new ByteArrayOutputStream()
    execOverrides {
        errorOutput = System.err
        standardOutput = output
    }
    doLast {
        String outStr = output
        String hierarchyStr = getNodeByName(outStr, 'hierarchy', '')
        String topLevelPath = getNodeByName(outStr, 'topLevelFile', "${dir.src}/test/testbenchs/decoder_tb.vhdl")
        exec {
            commandLine 'python', "${dir.scripts}/modify.py", topLevelPath, dir.out, modify_replace, '-'
            errorOutput = System.err
            standardOutput = output2
            standardInput = new ByteArrayInputStream(hierarchyStr.bytes)
        }
    }
    doLast {
        String outStr = output2
        file(outFile).text = outStr
    }

    ext.list = {
        return file(outFile).text.trim().split(' ')
    }
}

task analyze {
    group 'build:ghdl'
    description 'Run ghdl analyze'
    dependsOn hierarchy

    inputs.files files('vhdl')
    outputs.dir dir.out

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-a', ghdl.args, hierarchy.list()].flatten()
        }
    }
}

task elaborate {
    group 'build:ghdl'
    description 'Elaborate design'
    dependsOn analyze

    inputs.files files('vhdl')
    outputs.dir dir.out

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-e', ghdl.args, ghdl.topLevel].flatten()
        }
    }
}

task run {
    group 'build:ghdl'
    description 'Run top-level design'
    dependsOn elaborate

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-r', ghdl.args, ghdl.topLevel, '--wave=wave.ghw', '--vcd=wave.vcd'].flatten()
        }
    }
}

task waveform {
    group 'build:ghdl'
    description 'Open waveform in GTKWave'
    dependsOn run

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine 'gtkwave', '-f', 'wave.ghw'
        }
    }
}

task clean {
    group 'build'
    description 'Cleanup workspace'

    doLast {
        delete dir.out
        delete dir.gen
    }
}

task build {
    group 'build'
    dependsOn elaborate
}

delete fileTree('.') {
    include 'hs_err_*.log'
}

task copyToDist {
    dependsOn elaborate

    doLast {
        delete "${dir.out}/vhdl"
        copy {
            from hierarchy.list(), 'out/build.txt'
            into "${dir.out}/vhdl"
        }
    }
}

task tar {
    dependsOn copyToDist
    doLast {
        ant.tar(destfile: "${ghdl.workDir}/src-${decoder_algorithm}.tgz",
            basedir: "${ghdl.workDir}/vhdl", compression:'gzip')
    }
}
