/* groovylint-disable BuilderMethodWithSideEffects, DuplicateStringLiteral, FactoryMethodName, LineLength, UnusedMethodParameter, VariableTypeRequired */
plugins {
    id 'com.github.node-gradle.node' version '3.5.1'
    id 'net.rdrei.android.buildtimetracker' version '0.11.0'
}
buildtimetracker {
    reporters {
        summary {
            ordered false
            threshold 100
            barstyle 'unicode'
        }
    }
}

class CustomEventLogger extends BuildAdapter implements TaskExecutionListener {

    void beforeExecute(Task task) {
        super()
    }
    void afterExecute(Task task, TaskState state) {
        super()
    }
    void buildFinished(BuildResult result) {
        if (result.failure != null) {
            println '\033[31;1mBUILD FAILED\033[0m'
        } else {
            println '\033[32;1mBUILD SUCCESS\033[0m'
        }
    }

}
// gradle.useLogger(new CustomEventLogger())

String buildDir = 'out'
String hierarchyOut = "${buildDir}/.hlist"
def ghdl = [
        exec: 'ghdl',
        workDir: buildDir,
        args: ['--std=08', '-fcolor-diagnostics'],
        topLevel: 'decoder_tb'
]

if (project.hasProperty('ghdl_topLevel')) {
    ghdl.topLevel = ghdl_topLevel
}

task compileScripts(type: Exec) {
    group 'build:pre'
    description 'Use tsc to compile helper scripts'
    dependsOn yarn

    inputs.dir 'scripts'
    outputs.dir "${buildDir}/dist"

    commandLine 'yarn', 'tsc', '--outDir', "${buildDir}/dist"
}

task vhdlGen(type: Exec) {
    workingDir 'scripts'
    String size = '73'
    String chkBits = '3'
    if (project.hasProperty('vhdlGenSize')) {
        size = vhdlGen_size
    }
    if (project.hasProperty('vhdlGenChkBits')) {
        chkBits = vhdlGen_chkBits
    }
    commandLine 'python', 'generator.py', size, chkBits

    inputs.dir 'scripts'
    outputs.dir 'vhdl/gen'
    finalizedBy {
        copy2q2prj
    }
}

task hierarchy(type: NodeTask) {
    group 'build:pre'
    description 'Generate vhdl hierarchy for ghdl analyze'
    dependsOn vhdlGen
    dependsOn compileScripts

    inputs.files fileTree('vhdl')
    outputs.file hierarchyOut

    script = file("${buildDir}/dist/hierarchy.js")
    args = ["${hierarchyOut}"]
    ext.list = {
        return file(hierarchyOut).text.split(' ')
    }
}

task analyze {
    group 'build:ghdl'
    description 'Run ghdl analyze'
    dependsOn hierarchy

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-a', ghdl.args, hierarchy.list()].flatten()
        }
    }
}

task elaborate {
    group 'build:ghdl'
    description 'Elaborate design'
    dependsOn analyze

    inputs.files files('vhdl', "${buildDir}/.list")
    outputs.dir buildDir

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-e', ghdl.args, ghdl.topLevel].flatten()
        }
    }
}

task run {
    group 'build:ghdl'
    description 'Run top-level design'
    dependsOn elaborate

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine = [ghdl.exec, '-r', ghdl.args, ghdl.topLevel, '--wave=wave.ghw', '--stop-time=10ns'].flatten()
        }
    }
}

task waveform {
    group 'build:ghdl'
    description 'Open waveform in GTKWave'
    dependsOn run

    doLast {
        exec {
            workingDir = ghdl.workDir
            commandLine 'gtkwave', '-f', 'wave.ghw'
        }
    }
}

task clean {
    group 'build'
    description 'Cleanup workspace'

    doLast {
        delete "$buildDir"
        delete 'q2prj'
        delete 'vhdl/gen'
    }
}

task build {
    group 'build'
    dependsOn elaborate
}

delete fileTree('.') {
    include 'hs_err_*.log'
}

task copy2q2prj {
    description 'copy sources to quartus project dir'
    inputs.dir 'vhdl'
    outputs.dir 'q2prj'

    doLast {
        copy {
            from fileTree('vhdl') {
                include '**/*.vhdl'
            }.files
            into 'q2prj'
        }
    }
}
