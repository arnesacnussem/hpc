/* groovylint-disable BuilderMethodWithSideEffects, DuplicateStringLiteral, FactoryMethodName, LineLength, UnusedMethodParameter, VariableTypeRequired */
plugins {
    id("com.github.node-gradle.node") version 
    id("net.rdrei.android.buildtimetracker") version '0.11.0'
}
buildtimetracker {
    reporters {
        summary {
            ordered false
            threshold 100
            barstyle 'unicode'
        }
    }
}

String props(String name, String defaultVal) {
    return project.findProperty(name) ?: defaultVal
}

def dir = [
    src: 'vhdl',
out: 'out',
gen: "${out}/generated",
scripts: 'scripts'
]
def ghdl = [
    exec: 'ghdl',
workDir: "${dir.out}",
args: ['--std=08', '-fcolor-diagnostics'],
topLevel: props('ghdl_topLevel', 'decoder_tb')
]

task compileScripts(type: Exec) {
    group 'build:pre'
    description 'Use tsc to compile helper scripts'
    dependsOn yarn

            inputs.dir 'scripts'
    outputs.dir "${dir.out}/dist"

    commandLine 'yarn', 'tsc', '--outDir', "${dir.out}/dist"
}

task vhdlGen(type: Exec) {
    workingDir 'scripts'
    String size = '73'
    String chkBits = '3'
    if (project.hasProperty('vhdlGenSize')) {
        size = vhdlGen_size
    }
    if (project.hasProperty('vhdlGenChkBits')) {
        chkBits = vhdlGen_chkBits
    }
    commandLine 'python', 'generator.py', size, chkBits, file(dir.gen).absolutePath

    inputs.dir 'scripts'
    outputs.dir dir.gen
            finalizedBy {
                copy2q2prj
            }
}

task hierarchy(type: NodeTask) {
    group 'build:pre'
    description 'Generate vhdl hierarchy for ghdl analyze'
    dependsOn vhdlGen
            dependsOn compileScripts

            String hierarchyOut = "${dir.out}/hierarchy.list"
    inputs.files fileTree('vhdl')
    outputs.file hierarchyOut

            script = file("${dir.out}/dist/hierarchy.js")
    args = ["${hierarchyOut}"]
    def output = new ByteArrayOutputStream()
    execOverrides { ->
        it.errorOutput = System.err
        it.standardOutput = output
    }
    doLast {
        ext.output = {
            return standardOutput.toString()
        }
    }
}

task modify(type: Exec) {
    dependsOn hierarchy

            commandLine 'python', 'scripts/ModifyDecoderType.py', 'modify_IN', 'modify_OUT', 'modify_REPLACE', '-'
    errorOutput = System.err
    standardInput = new ByteArrayInputStream(hierarchy.output())
    standardInput.close()
    doLast {
        ext.hierarchy = {
            retrun
        }
    }
}

task analyze {
    group 'build:ghdl'
    description 'Run ghdl analyze'
    dependsOn hierarchy

            doLast {
                exec {
                    workingDir = ghdl.workDir
                    commandLine = [ghdl.exec, '-a', ghdl.args, hierarchy.list()].flatten()
                }
            }
}

task elaborate {
    group 'build:ghdl'
    description 'Elaborate design'
    dependsOn analyze

            inputs.files files('vhdl', hierarchy.list())
    outputs.dir dir.out

            doLast {
                exec {
                    workingDir = ghdl.workDir
                    commandLine = [ghdl.exec, '-e', ghdl.args, ghdl.topLevel].flatten()
                }
            }
}

task run {
    group 'build:ghdl'
    description 'Run top-level design'
    dependsOn elaborate

            doLast {
                exec {
                    workingDir = ghdl.workDir
                    commandLine = [ghdl.exec, '-r', ghdl.args, ghdl.topLevel, '--wave=wave.ghw', '--stop-time=10ns'].flatten()
                }
            }
}

task waveform {
    group 'build:ghdl'
    description 'Open waveform in GTKWave'
    dependsOn run

            doLast {
                exec {
                    workingDir = ghdl.workDir
                    commandLine 'gtkwave', '-f', 'wave.ghw'
                }
            }
}

task clean {
    group 'build'
    description 'Cleanup workspace'

    doLast {
        delete dir.out
                delete dir.gen
                delete 'q2prj'
    }
}

task build {
    group 'build'
    dependsOn elaborate
}

delete fileTree('.') {
    include 'hs_err_*.log'
}

task copy2q2prj {
    description 'copy sources to quartus project dir'
    inputs.files files(dir.src, dir.out)
    outputs.dir 'q2prj'
    dependsOn elaborate
            doLast {
                copy {
                    from hierarchy.list()
                    into 'q2prj'
                }
            }
}
